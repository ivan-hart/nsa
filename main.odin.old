package nsa

import "core:fmt"
import glm "core:math/linalg/glsl"
import math "core:math"
import "core:os"
import "core:strings"

import gl "vendor:OpenGL"
import sdl "vendor:sdl3"

import ecs "ecs"
import win "window"
import camera "camera"

// Component Definitions
Input :: struct {
	up:    sdl.Scancode,
	down:  sdl.Scancode,
	left:  sdl.Scancode,
	right: sdl.Scancode,
	jump:  sdl.Scancode,
	crouch:sdl.Scancode,
}

Transform :: struct {
	model: glm.mat4,
}

Renderable :: struct {
	vao:           u32,
	indices_count: i32,
}

// Systems
render_system :: proc(registry: ^ecs.Registry, program: u32) {
	gl.UseProgram(program)
	for entity in registry.entities {
		transform := ecs.registry_get_component(registry, entity, Transform)
		renderable := ecs.registry_get_component(registry, entity, Renderable)
		if transform == nil || renderable == nil do continue

		cam := camera.get_instance()

		mvp := transform.model * cam.projection * cam.view

		gl.UniformMatrix4fv(gl.GetUniformLocation(program, "mvp"), 1, gl.FALSE, &mvp[0][0])
		gl.BindVertexArray(renderable.vao)
		gl.DrawElements(gl.TRIANGLES, renderable.indices_count, gl.UNSIGNED_SHORT, nil)
	}
}

update_camera :: proc(keys: [^]bool, mouse_pos: [2]f32, dt: f32) {
    cam := camera.get_instance()
    
    // Constants (adjust these values to your preference)
    MOUSE_SENSITIVITY :: 0.15
    MOVE_SPEED :: 5.0
    
    // Mouse rotation
    if camera.mouse_lock {
        // Update yaw and pitch with mouse delta
        cam.yaw += f32(mouse_pos.x) * MOUSE_SENSITIVITY
        cam.pitch -= f32(mouse_pos.y) * MOUSE_SENSITIVITY
        
        // Keep pitch within [-89, 89] degrees to prevent flipping
        cam.pitch = clamp(cam.pitch, -89.0, 89.0)
    }
    
    // Calculate direction vectors from Euler angles
    yaw_rad := glm.radians(cam.yaw)
    pitch_rad := glm.radians(cam.pitch)
    
    forward := glm.normalize(glm.vec3{
        math.cos(yaw_rad) * math.cos(pitch_rad),
        math.sin(pitch_rad),
        math.sin(yaw_rad) * math.cos(pitch_rad),
    })
    
    right := glm.normalize(glm.cross(forward, glm.vec3{0, 1, 0}))
    up := glm.normalize(glm.cross(right, forward))
    
    // Keyboard movement
    move_dir := glm.vec3{0, 0, 0}
    
    if keys[sdl.Scancode.W] do move_dir += forward
    if keys[sdl.Scancode.S] do move_dir -= forward
    if keys[sdl.Scancode.A] do move_dir -= right
    if keys[sdl.Scancode.D] do move_dir += right
    if keys[sdl.Scancode.SPACE] do move_dir += {0, 1, 0}
    if keys[sdl.Scancode.LCTRL] do move_dir -= {0, 1, 0}
    
    // Normalize and apply movement
    if len(move_dir) > 0 {
        move_dir = glm.normalize(move_dir)
        cam.position += move_dir * f32(MOVE_SPEED) * dt
    }
    
    // Update view matrix to look at target direction
    cam.view = glm.mat4LookAt(cam.position, cam.position + forward, up)
}

main :: proc() {
	win.init()
	camera.init()

	base_path := string(sdl.GetBasePath())

	vs_path := strings.concatenate({base_path, "assets/shaders/basic.vs"}, context.allocator)
	fs_path := strings.concatenate({base_path, "assets/shaders/basic.fs"}, context.allocator)

	program, p_ok := gl.load_shaders_file(vs_path, fs_path)
	if !p_ok {
		fmt.printfln("Failed to create shader program!")
	}

	delete(vs_path)
	delete(fs_path)

	// Create square geometry
	Vertex :: struct {
		pos:   glm.vec3,
		color: glm.vec4,
	}

	vertices := []Vertex {
		{{10, 0, 10}, {1, 0, 0, 1}},
		{{10, 0, -10}, {0, 1, 0, 1}},
		{{-10, 0, -10}, {0, 0, 1, 1}},
		{{-10, 0, 10}, {0.8, 0.5, 0, 1}},
	}
	indices := []u16 {
		0, 1, 2,
		2, 3, 0
	}

	// Create VAO/VBO/EBO
	vao, vbo, ebo: u32
	gl.GenVertexArrays(1, &vao)
	gl.GenBuffers(1, &vbo)
	gl.GenBuffers(1, &ebo)

	gl.BindVertexArray(vao)

	gl.BindBuffer(gl.ARRAY_BUFFER, vbo)
	gl.BufferData(
		gl.ARRAY_BUFFER,
		len(vertices) * size_of(Vertex),
		raw_data(vertices),
		gl.STATIC_DRAW,
	)

	gl.BindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo)
	gl.BufferData(
		gl.ELEMENT_ARRAY_BUFFER,
		len(indices) * size_of(u16),
		raw_data(indices),
		gl.STATIC_DRAW,
	)

	// Vertex attributes
	gl.VertexAttribPointer(0, 3, gl.FLOAT, false, size_of(Vertex), offset_of(Vertex, pos))
	gl.EnableVertexAttribArray(0)
	gl.VertexAttribPointer(1, 4, gl.FLOAT, false, size_of(Vertex), offset_of(Vertex, color))
	gl.EnableVertexAttribArray(1)

	// Initialize ECS
	registry: ecs.Registry
	ecs.registry_init(&registry)
	defer ecs.registry_destroy(&registry)

	// Create square entity
	square := ecs.registry_create_entity(&registry)
	ecs.registry_add_component(&registry, square, Transform{glm.mat4(1)})
	ecs.registry_add_component(&registry, square, Renderable{vao, i32(len(indices))})

	win.show()

	mouse_pos : [2]f32

	// Main loop
	running := true
	for running {
		keys := sdl.GetKeyboardState(nil)

		// Event handling
		e: sdl.Event
		for sdl.PollEvent(&e) {
			#partial switch e.type {
			case .QUIT:
				running = false
				break
			case .MOUSE_MOTION:
				mouse_pos[0] = e.motion.xrel
				mouse_pos[1] = e.motion.yrel
				break
			case .MOUSE_BUTTON_DOWN:
				camera.mouse_lock = !camera.mouse_lock
				sdl.SetWindowMouseGrab(win.get_instance().sdl_window, camera.mouse_lock)
			}
		}
		update_camera(keys, mouse_pos, 0.016)

		// Rendering
		gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
		render_system(&registry, program)
		win.swap()

		sdl.Delay(16)
	}
}
